[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi, I’m Kat! I’m a maths graduate with an interest in data visualisation, data science, technology and programming."
  },
  {
    "objectID": "posts/Scatter/index.html",
    "href": "posts/Scatter/index.html",
    "title": "Creating Scatter Plots with ggplot2",
    "section": "",
    "text": "This post follows directly on from my last, “How Many Penguins? A First Look at Visualising Data With R and ggplot2”, so if you are new to ggplot2 check that one out first!\nToday we are going to be continuing looking at the Palmer Archipelago dataset, this time for creating scatter plots.\nAs before the dataset being used can be downloaded directly (in csv format) from Kaggle or imported directly into R with the palmerpenguins package.\n\n\n\nPalmer penguins. Artwork by @allison_horst.\n\n\n\nImporting the Data\nAs previously we will be needing the ggthemes and ggplot2 packages. To show off a few themes we’ll use a different one for each plot. This time we will also be using the dplyr package for data manipulation and the ggExtra package which we will be using to plot distributions on plots.\nFirstly we import the data with read.csv.\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(ggExtra)\n\n# Import the penguins dataset using the read.csv() function, built into R\npenguins &lt;- read.csv(\"penguins_size.csv\")\n\nNext we convert the ‘species’, ‘island’ and ‘sex’ variables to factors, this will be a requirement for some of our plots and is generally good practice for factor variables. This is done with lapply, click here for more on this.\n\n# Convert species, island and sec to factor variables\npenguins[c('species', 'island', 'sex')] &lt;- lapply(penguins[c('species', 'island', 'sex')], as.factor)\n\nOur final statement is quite a large one and shows off some of the power of pipes in R. In R |&gt; is a pipe, which can be read as “then”. So the statement penguins &lt;- penguins |&gt; na.omit() |&gt; rename('Island' = 'island', 'Species' = 'species', 'Sex' = 'sex') |&gt; filter(!(Sex == \".\")) is saying to take the penguins dataframe, then remove any NA values, then rename ‘island’, ‘species’ and ‘sex’ columns to their capitalised variants then filter the dataframe to remove any rows where the sex of the penguin is recorded as ‘.’ and finally to assign the resulting dataframe to the penguins variable. The use of pipes allows us to perform all of these operations in a single line of code, rather than several.\n\n# Omit NA values from the dataset, rename 'island', 'species' and 'sex' to be capitalised and remove any penguins with a sex of '.'.\n\npenguins &lt;- penguins |&gt; na.omit() |&gt; rename('Island' = 'island', 'Species' = 'species', 'Sex' = 'sex') |&gt; filter(!(Sex == \".\"))\n\n\n\nSimple Scatter\nTo create a basic scatter plot we can use geom_point(), as shown below. As previously we pass the penguins dataframe into the ggplot() function with a pipe, set the aes values to be culmen length and culmen depth of the penguins and finally add the plot.\n\npenguins |&gt;\n  ggplot(aes(x = culmen_length_mm, y = culmen_depth_mm))+\n  geom_point()\n\n\n\n\n\n\n\n\n\n\nMaking Improvements\nWe can improve this plot by adding labels, a little colour and using a theme. My usual go to theme is theme_hc() from ggthemes so we’ll start with this one.\n\npenguins |&gt;\n  ggplot(aes(x = culmen_length_mm, y = culmen_depth_mm))+\n  geom_point(shape = 16, colour = \"#FF4F00\")+\n  labs(x = \"Culmen Length (mm)\", y = \"Culmen Depth (mm)\", title = \"Culmen Length vs. Depth in \\n Penguins in the Palmer Archipelago\") +\n  theme_hc() +\n  geom_rangeframe()\n\n\n\n\n\n\n\n\nLooking at our plot it is clear that there appear to be some distinct clusters in the plot, at least two. We have three species of penguins in the dataset, three different islands and two sexes which could all be potential reasons for this clustering. Later we will graphically look at what these clusters may be.\nBefore that, however, it is important to look at how to add a line of best fit to the scatter plot. This is incredibly easy with R and we even get built in confidence intervals for free! The line of best fit is created with geom_smooth(method=\"lm\") where “lm” stands for linear model.\nLooking at the plot we can see that a linear model is not a great fit for our data at the moment.\n\npenguins |&gt;\n  ggplot(aes(x = culmen_length_mm, y = culmen_depth_mm))+\n  geom_point(shape = 16, colour = \"#FF4F00\")+\n  labs(x = \"Culmen Length (mm)\", y = \"Culmen Depth (mm)\", title = \"Culmen Length vs. Depth in \\n Penguins in the Palmer Archipelago\") +\n  geom_smooth(method=\"lm\")+\n  theme_economist_white()+\n  geom_rangeframe()\n\n\n\n\n\n\n\nprint(cor(penguins$culmen_depth_mm, penguins$culmen_length_mm))\n\n[1] -0.2286256\n\n\n\n\nMarginal Plots\nWe can further improve our plot by adding marginal plots, with ggMarginal from the ggExtra package. These plots help us see the distribution of the data. We could make these plots separately but it can be nice to have this information in the same place as our main plot.\nWe do this as below, unlike before we know need to assign our plot to a variable and then call ggMarginal on our plot. This is to reduce code repetition when showing off each type of marginal plot available.\n\nplot &lt;- penguins |&gt;\n        ggplot(aes(x = culmen_length_mm, y = culmen_depth_mm))+\n        geom_point(shape = 16, colour = \"#FF4F00\")+\n        labs(x = \"Culmen Length (mm)\", y = \"Culmen Depth (mm)\", title = \"Culmen Length vs. Depth in \\n Penguins in the Palmer Archipelago\") +\n        geom_smooth(method=\"lm\")+\n        theme_calc()\n\n\nggMarginal(plot, type=\"histogram\", fill = \"#FF4F00\", size=5, bins = 12)\n\n\n\n\n\n\n\n\n\nggMarginal(plot, type=\"boxplot\", fill = \"#FF4F00\", size=15)\n\n\n\n\n\n\n\n\n\nggMarginal(plot, type=\"density\", fill = \"#FF4F00\", size=10)\n\n\n\n\n\n\n\n\nFor this data in particular I think the boxplot and density plots show the most information. One advantage of creating box plots like this is that it removes a usual downside of the plot, a loss of information about the actual distribution of the data.\n\n\nInvestigating Clustering\nOur previous plots were fine but they do little to explain the clusters of data in the graph. To investigate this we can add the parameter colour = Species to aes.\n\npenguins |&gt;\n  ggplot(aes(x = culmen_length_mm, y = culmen_depth_mm, colour = Species))+\n  geom_point(shape = 16)+\n  labs(x = \"Culmen Length (mm)\", y = \"Culmen Depth (mm)\", title = \"Culmen Length vs. Depth \\n in Penguins in the Palmer Archipelago by Species\") +\n  geom_smooth(method=\"lm\")+\n  scale_fill_few()+\n  theme_few()\n\n\n\n\n\n\n\n\nWe see three distinct clusters based on species of penguin, with very little overlap. Graphically we can see that three linear models for this data appears to be doing a better job than one. We can put some numbers to this by looking at the correlation between culmen length and depth for each species of penguin.\n\n# Investigate the correlation for each species\ncorrelation &lt;- penguins %&gt;%\n  group_by(Species) %&gt;%\n    summarise(correlation = cor(culmen_length_mm, culmen_depth_mm))\n\nprint(correlation)\n\n# A tibble: 3 × 2\n  Species   correlation\n  &lt;fct&gt;           &lt;dbl&gt;\n1 Adelie          0.386\n2 Chinstrap       0.654\n3 Gentoo          0.654\n\n\nThe closer the magnitude of the correlation is to 1.0, the stronger the correlation. For Adelie penguins the correlation is weak and positive, at 0.4. For Chinstrap and Gentoo penguins the correlation is stronger, 0.65 for both. This would suggest that a linear model such as the one plotted would work well for Chinstrap and Gentoo penguins, which matches our intuition when looking at the distribution of data for each species.\nRather than species we might also want to consider Island!\n\npenguins |&gt;\n  ggplot(aes(x = culmen_length_mm, y = culmen_depth_mm, colour = Island))+\n  geom_point(shape = 16)+\n  labs(x = \"Culmen Length (mm)\", y = \"Culmen Depth (mm)\", title = \"Culmen Length vs. Depth by Island \\n in Penguins in the Palmer Archipelago\") +\n  geom_smooth(method=\"lm\")+\n  scale_fill_few()+\n  theme_foundation()\n\n\n\n\n\n\n\ncorrelation &lt;- penguins %&gt;%\n  group_by(Island) %&gt;%\n    summarise(correlation = cor(culmen_length_mm, culmen_depth_mm))\n\nprint(correlation)\n\n# A tibble: 3 × 2\n  Island    correlation\n  &lt;fct&gt;           &lt;dbl&gt;\n1 Biscoe         -0.445\n2 Dream           0.365\n3 Torgersen       0.216\n\n\nThis seems to have been less successful than splitting the data by species. There is clearly some separation but this is far less distinct. Correlation is also generally weaker.\nThere’s nothing stopping us considering multiple factors on the same graph! One way to do this is to use the shape attribute i.e. change the shape of the point for each species. R will even create new lines of best fit for us for each combination! Sex is an obvious choice to do this with as we would reasonably expect differences between penguin sexes but not necessarily between the same species in different locations (although factors such as nutrition could make this the case).\nLooking at sex alone there is a clear difference in our lines of best fit. Correlation appears to be similar between the sexes however both culmen length and depth seem to trend larger in male penguins.\n\npenguins |&gt;\n  ggplot(aes(x = culmen_length_mm, y = culmen_depth_mm, colour = Sex))+\n  geom_point()+\n  labs(x = \"Culmen Length (mm)\", y = \"Culmen Depth (mm)\", title = \"Culmen Length vs. Depth by Sex \\n in Penguins in the Palmer Archipelago\") +\n  geom_smooth(method=\"lm\")+\n  scale_fill_few()+\n  theme_solarized()\n\n\n\n\n\n\n\ncorrelation &lt;- penguins %&gt;%\n  group_by(Sex) %&gt;%\n    summarise(correlation = cor(culmen_length_mm, culmen_depth_mm))\n\nprint(correlation)\n\n# A tibble: 2 × 2\n  Sex    correlation\n  &lt;fct&gt;        &lt;dbl&gt;\n1 FEMALE      -0.426\n2 MALE        -0.395\n\n\nNow let’s consider sex and species!\n\npenguins |&gt;\n  ggplot(aes(x = culmen_length_mm, y = culmen_depth_mm, colour = Sex, shape=Species))+\n  geom_point()+\n  labs(x = \"Culmen Length (mm)\", y = \"Culmen Depth (mm)\", title = \"Culmen Length vs. Depth by Sex and Species \\n in Penguins in the Palmer Archipelago\") +\n  geom_smooth(method=\"lm\")+\n  scale_fill_few()+\n  theme_excel_new()\n\n\n\n\n\n\n\n\nA similar patterns seems to emerge for each species by sex, however there is some slight strangeness. The linear model for male chinstrap penguins makes it appear like their culmen length increases at a greater rate with culmen depth than for female chinstrap penguins. This may be the case, but it may not. I think this highlights a key issue with splitting up data like this, as the size of the dataset you are working with decreases any attempt to make predictions with it become inherently less reliable.\n\n\nFacet Plots\nWhilst graphs like this can be useful they are a little bit visually busy, we will finish by looking at a different way to see multiple plots in one place, with a facet.\nFor this particular set of data we need only add the facet_grid function as shown.\n\nggplot(penguins, aes(x=culmen_length_mm, y = culmen_depth_mm, colour = Species))+\n  geom_point()+\n  geom_smooth(method=\"lm\")+\n  facet_grid(Island~Species, # facet_grid showing Island on the y axis and Species on the x axis\n             scales=\"free\",\n             space=\"free_x\") + \n  labs(x=\"Culmen Length (mm)\",\n       y=\"Culmen Depth (mm)\",\n       title=\"Culmen Length vs Depth by Species and Island for Penguins in the Palmer Archipelago\")+\n  theme_base()\n\n\n\n\n\n\n\n\nWe can also do this for sex and species.\n\nggplot(penguins, aes(x=culmen_length_mm, y = culmen_depth_mm, colour = Sex))+\n  geom_point()+\n  geom_smooth(method=\"lm\")+\n  facet_grid(Sex~Species, # facet_grid showing Sex on the y axis and Species on the x axis\n             scales=\"free\",\n             space=\"free_x\") + \n  labs(x=\"\",\n       y=\"Penguin Count\",\n       title=\"Culmen Length vs Depth by Species and Sex for Penguins in the Palmer Archipelago\")+\n  theme_stata()\n\n\n\n\n\n\n\n\nOr even just species if you would rather the data not be all on one plot.\n\nggplot(penguins, aes(x=culmen_length_mm, y = culmen_depth_mm, colour = Sex))+\n  geom_point()+\n  geom_smooth(method=\"lm\")+\n  facet_grid(~Species, # facet_grid showing Sex on the y axis and Species on the x axis\n             scales=\"free\",\n             space=\"free_x\") + \n  labs(x=\"\",\n       y=\"Penguin Count\",\n       title=\"Culmen Length vs Depth by Species for Penguins in the Palmer Archipelago\")+\n  theme_bw()\n\n\n\n\n\n\n\n\nWe need to be very careful here however as if you were not paying attention it might not be obvious that this plot has three distinct x axes.\nWe could make this same plot the other way around too. Notice that this time we need to write Species~.\n\nggplot(penguins, aes(x=culmen_length_mm, y = culmen_depth_mm, colour = Sex))+\n  geom_point()+\n  geom_smooth(method=\"lm\")+\n  facet_grid(Species~., # facet_grid showing Sex on the y axis and Species on the x axis\n             scales=\"free\",\n             space=\"free_x\") + \n  labs(x=\"\",\n       y=\"Penguin Count\",\n       title=\"Culmen Length vs Depth by Species for Penguins in the Palmer Archipelago\")+\n  theme_dark()\n\n\n\n\n\n\n\n\n\n\nConclusion\nI hope that this post has been a useful introduction to scatter plots with ggplot2. Why not try investigating the relationships between some of the other numeric variables for this data such as body mass or flipper_length? You could even try investigating three numerical variables at once using bubble plots!"
  },
  {
    "objectID": "posts/Visualisation with ggplot2/index.html",
    "href": "posts/Visualisation with ggplot2/index.html",
    "title": "A First Look at Visualising Data With R and ggplot2",
    "section": "",
    "text": "R and its ggplot2 package are wonderful tools for visualising data. In this post, we will explore some of the basics of plotting with ggplot2 by creating bar charts using the famous Palmer Archipelago dataset.\n\n\n\nPalmer penguins. Artwork by @allison_horst.\n\n\nThe dataset being used can be downloaded directly (in csv format) from Kaggle or imported directly into R with the palmerpenguins package.\n\nImporting the Data\nMove the dataset to the location of the R script you will be plotting in, or use a relative path. Remember that for R to find your file you may need to set your current working directory, you can do this in RStudio by clicking Session &lt;- Set Working Directory &lt;- To Source File Location in the banner, or by running the setwd(\"/your_path_here\") command.\n\n# Import the penguins dataset using the read.csv() function, built into R\npenguins &lt;- read.csv(\"penguins_size.csv\")\n\n# View the first few entries of the dataframe\nprint(penguins[1:5,])\n\n  species    island culmen_length_mm culmen_depth_mm flipper_length_mm\n1  Adelie Torgersen             39.1            18.7               181\n2  Adelie Torgersen             39.5            17.4               186\n3  Adelie Torgersen             40.3            18.0               195\n4  Adelie Torgersen               NA              NA                NA\n5  Adelie Torgersen             36.7            19.3               193\n  body_mass_g    sex\n1        3750   MALE\n2        3800 FEMALE\n3        3250 FEMALE\n4          NA   &lt;NA&gt;\n5        3450 FEMALE\n\n\n\n\nCleaning Up\nViewing the dataset by printing the first few rows has revealed our first issue, this data has several NA values. A great way to visualise the amount of data missing in a given dataframe in R is using the vis_miss function from the naniar library. You may need to install this by running install.packages('naniar').\n\n# install.packages('naniar')\nlibrary(naniar)\nvis_miss(penguins)\n\n\n\n\n\n\n\n\nReassuringly the dataset has very few missing values. The easiest way to deal with these will be to exclude them using na.omit() which simply removes each row in a dataframe that has any NA values in it.\n\npenguins &lt;- na.omit(penguins)\n\nvis_miss(penguins)\n\n\n\n\n\n\n\n\nAnother good idea when working with a new dataset is to make sure that any categorical variables are treated as factors in R. This can be done with as.factor(col) and makes sure that plots of categorical variables work correctly.\n\npenguins$sex &lt;- as.factor(penguins$sex)\npenguins$island &lt;- as.factor(penguins$island)\npenguins$species &lt;- as.factor(penguins$species)\n\nWe can also change the names of any columns. Below I have changed the names of the variables will be plotting to be capitalised so that they will look a little nicer in legends.\n\nnames(penguins)[names(penguins) == 'island'] &lt;- 'Island'\nnames(penguins)[names(penguins) == 'species'] &lt;- 'Species'\nnames(penguins)[names(penguins) == 'sex'] &lt;- 'Sex'\n\nThere is one more issue with the dataset in its current form. The sex for one observation is missing, instead containing just a full stop. A helpful side effect of converting our categorical variables to factors is that we can see this easily by printing the levels of each factor variable.\n\nprint(levels(penguins$Sex))\n\n[1] \".\"      \"FEMALE\" \"MALE\"  \n\nprint(levels(penguins$Island))\n\n[1] \"Biscoe\"    \"Dream\"     \"Torgersen\"\n\nprint(levels(penguins$Species))\n\n[1] \"Adelie\"    \"Chinstrap\" \"Gentoo\"   \n\n\nTo handle this we can use the filter() function from the dplyr library. The ! before (Sex == \".\") means that rather than returning the dataset with only rows where the sex of the penguin is “.” the function will do the opposite and select all rows where the sex does not equal “.”.\n\nlibrary(dplyr)\npenguins &lt;- filter(penguins, !(Sex == \".\"))\n\nWe are now ready to start plotting. For this first look at ggplot2 we will focus on bar plots.\n\n\nCreating Plots\nTo create any plot with ggplot2 we first need to create the plot area with the ggplot() function. For all plots we will need to specify the data being used and any aesthetics we wish to pass through to the graphs we will be plotting. For this first tutorial we will focus exclusively on the number of penguins for specific categories in the dataset rather than any other dependent variable.\n\nlibrary(ggplot2) # Load the ggplot2 library at the start of the script\n\nggplot(data = penguins, aes(x=Species)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nIntuitively, we add new elements to a plot with +. For this tutorial we use geom_bar() for a bar plot but other plots available include geom_point() for a scatter plot, geom_col() for a column plot or geom_line() for a line plot. We could even add multiple plots to the same axes.\nIn aesthetics (aes), x = Species means that the x-axis of our bar plot i.e. the category is the species of penguin. In the below plot x = Island is used to instead have the island the penguin was found on in the x-axis. For this plot fill = Species indicates that we want our bars to be coloured by the species of the penguin.\n\n# We can also use a pipe from the dplyr library (think of it as 'then')\npenguins %&gt;%\n  ggplot(aes(x=Island, fill=Species)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nWe can enhance our plots by adding some labels using labs() to add a title, x-axis and y-axis. To change the title of a legend we can use the argument fill = title for bar plots.\n\npenguins %&gt;%\n  ggplot(aes(x=Species, fill=Species)) +\n  geom_bar()+\n  labs(title=\"Penguins in the Palmer Archipelago\",\n       x = \"Species\",\n       y=\"Penguin Count\")\n\n\n\n\n\n\n\npenguins %&gt;%\n  ggplot(aes(x=Island, fill=Species)) +\n  geom_bar(position = \"dodge2\")+\n  labs(title=\"Penguins in the Palmer Archipelago\",\n       x = \"Island\",\n       y=\"Penguin Count\")\n\n\n\n\n\n\n\n\nThemes allow us to customise our plots further. There are many built into ggplot2 however my favourite, easy to implement, themes are those in the ggthemes package. The below graphs use the themes theme_hc, theme_economist and theme_calc() but there are far more available. Each theme also comes with a colour palette that can be used. A custom colour palette could also have been used with scale_color_manual(c(color1, color2, color3)) .\n\nlibrary(ggthemes) # Load the ggthemes library\n\npenguins %&gt;%\n  ggplot(aes(x=Species, fill=Species)) +\n  geom_bar()+\n  labs(title=\"Penguins in the Palmer Archipelago\",\n       x=\"Species\",\n       y=\"Penguin Count\") +\n  geom_rangeframe() + # Highlights the range of the variables\n  theme_hc() + # Use the hc theme\n  scale_fill_hc()+ # Use the hc palette\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\npenguins %&gt;%\n  ggplot(aes(x=Island, fill=Species)) +\n  geom_bar(position = \"dodge2\")+ # position = dodge2 puts the bars side by side\n  labs(title=\"Penguins in the Palmer Archipelago\",\n       x = \"Island\",\n       y=\"Penguin Count\",\n       fill=\"Species\") +\n  geom_rangeframe() +\n  scale_fill_economist()+ # Use the economist palette\n  theme_economist() # Use the economist theme\n\n\n\n\n\n\n\npenguins %&gt;%\n  ggplot(aes(x=Sex, fill=Species)) +\n  geom_bar(position = \"dodge2\")+\n  labs(title=\"Penguins in the Palmer Archipelago\",\n       x = \"Sex\",\n       y=\"Penguin Count\",\n       fill=\"Species\") +\n  geom_rangeframe() +\n  scale_fill_few()+ \n  theme_calc() # We can mix and match themes and palettes\n\n\n\n\n\n\n\n\n\n\nCombining Plots\nWe can use a facet grid to combine all of the information from our plots so far into a single, easy to read plot. To do this we will need to reshape the penguins dataframe using the melt function and the the MASS, reshape and reshape2 packages.\n\nlibrary(MASS) \nlibrary(reshape2) \nlibrary(reshape) \n\n\npenguin_2 &lt;- melt(penguins, id = c('culmen_length_mm', 'culmen_depth_mm',\n                                   'flipper_length_mm', 'body_mass_g',\n                                   'Species','Sex'))\n\nprint(head(penguin_2)) # See the first few entries of our reshaped dataframe\n\n  culmen_length_mm culmen_depth_mm flipper_length_mm body_mass_g Species    Sex\n1             39.1            18.7               181        3750  Adelie   MALE\n2             39.5            17.4               186        3800  Adelie FEMALE\n3             40.3            18.0               195        3250  Adelie FEMALE\n4             36.7            19.3               193        3450  Adelie FEMALE\n5             39.3            20.6               190        3650  Adelie   MALE\n6             38.9            17.8               181        3625  Adelie FEMALE\n  variable     value\n1   Island Torgersen\n2   Island Torgersen\n3   Island Torgersen\n4   Island Torgersen\n5   Island Torgersen\n6   Island Torgersen\n\n# Create a vector so that we can later show the sex of a penguin as \"Male\"\n# or \"Female\" rather than the all caps version\n\nsex.labs &lt;- c(\"Male\", \"Female\")\nnames(sex.labs) &lt;- c(\"MALE\", \"FEMALE\")\n\n\nggplot(penguin_2, aes(x=value, fill = Species))+\n  geom_bar(position = \"dodge2\")+\n  facet_grid(Sex~variable, # facet_grid showing sex and each variable (Island) \n             scales=\"free\",\n             space=\"free_x\", \n             labeller = labeller(Sex=sex.labs))+ # Renames the sexes\n  labs(x=\"\",\n       y=\"Penguin Count\",\n       title=\"Penguins in the Palmer Archipelago\")+\n  theme_hc()+\n  scale_fill_manual(values=c(\"#FF8100\", \"#C25ECA\", \"#067476\")) # Set custom colours\n\n\n\n\n\n\n\n\n\n\nConclusion\nThis final plot shows us the distribution of penguins across each island, for each species and for both sexes.\nIn the next post we will begin looking at the other variables in the dataset such as body mass and flipper length and look at if these vary based on sex, island or species."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "Matrices Worksheets 1.1: Matrix Arithmetic\n\n\n\n\n\n\nfurther maths worksheets\n\n\nmatrices\n\n\n\nA worksheet and solution on adding and subtracting matrices.\n\n\n\n\n\nApr 27, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nCreating Waffle Plots in R with Waffle\n\n\n\n\n\n\nR\n\n\ndata visualisation\n\n\nR tutorial\n\n\n\nAn introduction to waffle plots in R by looking at the 2024 Olympic Games.\n\n\n\n\n\nApr 26, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nCreating Scatter Plots with ggplot2\n\n\n\n\n\n\nggplot2\n\n\nR\n\n\ndata visualisation\n\n\n\nAn introduction to scatter plots in ggplot2.\n\n\n\n\n\nApr 7, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nA First Look at Visualising Data With R and ggplot2\n\n\n\n\n\n\nggplot2\n\n\nR\n\n\ndata visualisation\n\n\n\nAn introduction to ggplot2 using the Palmer Archipelago dataset, focusing on data cleansing and bar plots.\n\n\n\n\n\nNov 9, 2024\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Waffle/index.html",
    "href": "posts/Waffle/index.html",
    "title": "Creating Waffle Plots in R with Waffle",
    "section": "",
    "text": "Introduction\nIn this post we will be creating waffle plots with R, using the waffle() function from the package of the same name. In terms of necessary packages I would recommend dplyr(for the handy filter() and select() functions), tidyr (for the pivot_longer() function) and of course waffle (to allow us to create waffle plots).\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(waffle)   \n\n\n\nImporting The Data\nWaffle plots are best used to visualise count data, often as an alternative to something like a pie chart or bar chart. The data we will be using is a count of medals won at the Paris 2024 Olympic Games by country. This dataset is from Kaggle (which is a generally useful place to find datasets to practice data visualisation or machine learning) and can be found here.\n\n\nProcessing The Data\nOut of the box the data looks as shown below.\n\n# Import the data from a csv file\nolympic_data &lt;- read.csv('olympics2024.csv')\n\nprint(head(olympic_data))\n\n  Rank       Country Country.Code Gold Silver Bronze Total\n1    1 United States           US   40     44     42   126\n2    2         China          CHN   40     27     24    91\n3    3         Japan          JPN   20     12     13    45\n4    4     Australia          AUS   18     19     16    53\n5    5        France          FRA   16     26     22    64\n6    6   Netherlands          NED   15      7     12    34\n\n\nThis is great as there is not particularly any cleaning that we will need to do. It is worth getting rid of the Country.Code and Total columns however as we will not be needing these. We can do this with select(). We can see that Gold, Silver and Bronze and Rank are already integers but Country contains character variables. It won’t make a difference here but it’s generally better to convert this column to factors instead, as this is how we will be using it.\n\n# Remove unwanted columns\nolympic_data &lt;- olympic_data |&gt;\n  select(-c(Total, Country.Code))\n\n# Convert country to factor\nolympic_data$Country &lt;- as.factor(olympic_data$Country)\n\n# See the result\nprint(head(olympic_data))\n\n  Rank       Country Gold Silver Bronze\n1    1 United States   40     44     42\n2    2         China   40     27     24\n3    3         Japan   20     12     13\n4    4     Australia   18     19     16\n5    5        France   16     26     22\n6    6   Netherlands   15      7     12\n\n\nThis is great however to plot a waffle plot we will actually need our data to be in a slightly different form. We do this with pivot_longer().\nWhen using pivot_longer() Remember to specify the columns in the order you would like them to appear in the plot.\n\nlong_data &lt;- olympic_data |&gt;\n  pivot_longer(\n    cols = c(Gold, Silver, Bronze),\n    names_to = \"Medal\",\n    values_to = \"Count\"\n  )\n\nHere is our new dataframe, each country now has three rows, one for each of the number of gold, silver and bronze medals won.\n\nprint(head(long_data))\n\n# A tibble: 6 × 4\n   Rank Country       Medal  Count\n  &lt;int&gt; &lt;fct&gt;         &lt;chr&gt;  &lt;int&gt;\n1     1 United States Gold      40\n2     1 United States Silver    44\n3     1 United States Bronze    42\n4     2 China         Gold      40\n5     2 China         Silver    27\n6     2 China         Bronze    24\n\n\n\n\nCreating Waffle Plots\nAs mentioned earlier, the way we will be creating a waffle plot today is with the waffle() function. This function could not be more simple, we input a dataframe with a column of descriptions and a column of values and out comes a waffle plot!\nTo start let’s just consider Great Britain (using filter).\n\n# Use filter to get just the data about GB\nGB_data &lt;- long_data |&gt; filter(Country == 'Great Britain')\n\n# Create the waffle plot,\nwaffle(data.frame(GB_data$Medal, GB_data$Count))\n\n\n\n\n\n\n\n\nWe could do with tidying this plot up a little and it would be nice to have the colours match “gold”, “silver” and “bronze”.\nIn general when making waffle plots it might also be nice to have as few “left over” squares as possible, meaning ideally we would want the total number of squares to be a multiple of the number of rows. We can do this by summing our Count column and looking for any factors which we can achieve concisely with the primeFactors() function from the numbers library.\n\nlibrary(numbers)\n\ntotal &lt;- sum(GB_data$Count)\n\nprint(primeFactors(total))\n\n[1]  5 13\n\n\nWe can see that 5 is a prime factor of our total, meaning if we choose 5 rows we won’t be left with any “hanging squares”.\n\n# Add a title, set the number of rows and change the legend position\nwaffle(data.frame(GB_data$Medal, GB_data$Count), rows = 5,\n       title = \"Team GB Medals: Paris 2024\",\n       legend_pos = \"bottom\")\n\n\n\n\n\n\n\n\nWe can change the colours with the colors argument.\n\nwaffle(data.frame(GB_data$Medal, GB_data$Count), rows = 5,\n       title = \"Team GB Medals: Paris 2024\",\n       legend_pos = \"bottom\",\n       colors = c('#d4af37', '#c0c0c0', '#cd7f32'))\n\n\n\n\n\n\n\n\nThere we have it, our first waffle plot! Each square represents a medal won.\nWe can also turn this plot into a pictogram, to do this you will need fontawesome installed on your computer. By default the medal glyph is a bit too large for this plot so we set its size manually to 8 with the glyph_size argument.\n\nlibrary(extrafont)\nlibrary(fontawesome)\nloadfonts(device = 'all')\nwaffle(data.frame(GB_data$Medal, GB_data$Count), rows = 5,\n       title = \"Team GB Medals: Paris 2024\",\n       legend_pos = \"bottom\",\n       colors = c('#d4af37', '#c0c0c0', '#cd7f32'),\n       use_glyph = 'medal', glyph_size = 8)\n\n\n\n\n\n\n\n\nThere’s nothing stopping us creating plots for different countries too. In fact we could show several on one plot using the iron function from the waffle package or using a function from another package such as plot_grid() from the cowplot package.\nTo simplify our code when doing this I’m also going to create a function to make us a waffle plot.\nThis function has one mandatory input, country, the country you wish to make the plot for. It has optional argument of data (I made this customisable in case we wished to plot for a different Olympic Games for example), legend_pos which we can use to make sure there’s only one legend for the plot and size in case we want to adjust this.\nTo create a title that gives each country and its rank we use paste() which is a way to concatenate strings in R.\n\ncountry_waffle &lt;- function(country, data = long_data, legend_pos = 'none', size = 0.25)\n  {\n  data &lt;- data |&gt; filter(data$Country == country)\n  plot &lt;- waffle(data.frame(data$Medal, data$Count), \n                 size = size, legend_pos = legend_pos,\n                 keep = FALSE, colors = c('#d4af37', '#c0c0c0', '#cd7f32'),\n                 title =  paste(country, ':', data$Rank[1]))\n  return (plot)\n}\n\nLet’s test that this works for Australia. We do need to adjust the size parameter to make this look great.\n\ncountry_waffle(\"Australia\", size = 1, legend_pos='bottom')\n\n\n\n\n\n\n\n\nPerfect! Time to combine our plots. We will plot the top five countries with cowplot first.\n\nlibrary(cowplot)\n\n# Filter long_data to find the top 5 countries,\n# use unique to remove duplicates as each country has 3 rows.\ntop_countries &lt;- filter(long_data,\n                        Rank %in% c(1, 2, 3, 4, 5))$Country|&gt; unique()\n\n# Titles with cowplot are a bit awkward,\n# to get around this we use ggdraw and create a plot that is just a title.\n\ntitle &lt;- ggdraw() + \n  draw_label(\n    \"Paris 2024 Olympic Games: Medals for Top 5 Countries\",\n    fontface = 'bold',\n    hjust = 0\n  )\n\n# To get the layout we want we need to add two blank plots\n# to the first row using geom_blank()\n\nplot_grid(title, geom_blank(), geom_blank(),\n          country_waffle(top_countries[1]),\n          country_waffle(top_countries[2]),\n          country_waffle(top_countries[3]),\n          country_waffle(top_countries[4]),\n          country_waffle(top_countries[5],\n                         legend_pos = 'right'), ncol=3)\n\n\n\n\n\n\n\n\nAlternatively we could do this with the built in iron() function in waffle. I wanted to show both ways as something like plot_grid() is more customisable but it can be awkward to work with.\n\niron(country_waffle(top_countries[1]),\n     country_waffle(top_countries[2]),\n     country_waffle(top_countries[3],\n                    legend_pos = 'bottom'))\n\n\n\n\n\n\n\n\nThe iron() function is better for a smaller number of plots as it can squish things quite a bit.\nThis isn’t the only way of creating waffle plots however, in a future post I will be looking at creating waffle plots with geom_waffle instead, waffle() is great for simple one off plots but geom_waffle is definitely the way to go when trying to do something a bit more complicated, such as this example from r-graph-gallery.com."
  },
  {
    "objectID": "posts/Matrices Worksheets/index.html",
    "href": "posts/Matrices Worksheets/index.html",
    "title": "Matrices Worksheets 1.1: Matrix Arithmetic",
    "section": "",
    "text": "Introduction\nDuring the COVID-19 pandemic I created some worksheets based on A Level Maths and Further Maths. I’ve decided to upload these to my blog in case they can be of use.\nThe thumbnail used is from\n\n\nMatrix Arithmetic\n\nWrite down the size of the following matrices.\n\n\\[\n\\begin{pmatrix}\n1 & 0 & 1 \\\\\nx & y & z\n\\end{pmatrix}\n\\]\n\\[\n\\begin{pmatrix}\n-4 & 2 \\\\\n0 & 1\n\\end{pmatrix}\n\\]\n\\[\n\\begin{pmatrix}\n1 & 4 & -1 & 0\\\\\n-4 & 1 & -3 & 8 \\\\\n2 & 0 & -8 & 3\n\\end{pmatrix}\n\\]\n\n\nGiven the following matrices:\n\n\\[\n  \\text{A} = \\begin{pmatrix}\n                1 & 2 & -1 \\\\\n                0 & 4 & 1 \\\\\n                4 & 6 & -4\n            \\end{pmatrix},\n  \\]\n\\[\n\\text{B} = \\begin{pmatrix}\n                0 & 4& 1\\\\\n                2 & -6 & 0 \\\\\n            \\end{pmatrix},\n  \\]\n\\[\n  \\text{C} = \\begin{pmatrix}\n                -6 & 7 & -3\\\\\n                2& 0 & -1\\\\\n                3 & 4 & -9\\\\\n            \\end{pmatrix}.\n  \\]\nCalculate, where defined.\n\nA + C\nC - 2B\nA + B\n\n\n\n\nCalculate the following matrix sums.\n\n\n\n\\[\n\\begin{pmatrix}\n           1 & 2\\\\\n           3& 4\\\\\n           \\end{pmatrix} + 2\\begin{pmatrix}\n           4 & 8\\\\\n           0& -1\\\\\n           \\end{pmatrix}\n  \\]\n\\[\n\\begin{pmatrix}\n           0 & -8 & 6 \\\\\n           0 & -3 & 4 \\\\\n           -6 & 0 & 2 \\\\\n           \\end{pmatrix} - \\begin{pmatrix}\n           1 & 2 & 7 \\\\\n           6 & -5 & 4 \\\\\n           1 & 4 & -1 \\\\\n           \\end{pmatrix}\n  \\]\n\\[\n\\begin{pmatrix}\n           a & -1 & 2 \\\\\n           9 & -1 & 3 \\\\\n           -4 & -2 & 0 \\\\\n           3 & -3 & b \\\\\n           \\end{pmatrix} -2 \\begin{pmatrix}\n           -4 & 6 & 0 \\\\\n           3 & c & -1 \\\\\n           0 & -3 & d \\\\\n           4 & 2 &-6 \\\\\n           \\end{pmatrix}\n  \\]\n\n\n\nSolutions"
  }
]