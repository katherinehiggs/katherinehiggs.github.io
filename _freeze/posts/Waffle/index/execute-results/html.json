{
  "hash": "a7e3a3a52b00931706fcd040efa34828",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Creating Waffle Plots in R with Waffle\"\ndescription: \"An introduction to waffle plots in R by looking at the 2024 Olympic Games.\"\ndate: \"04/26/2025\"\ncategories:\n  - R\n  - data visualisation\n  - R tutorial\n---\n\n\n\n\n\n# Introduction\n\nIn this post we will be creating waffle plots with R, using the `waffle()` function from the package of the same name. In terms of necessary packages I would recommend `dplyr`(for the handy `filter()` and `select()` functions), `tidyr` (for the `pivot_longer()` function) and of course `waffle` (to allow us to create waffle plots).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(waffle)   \n```\n:::\n\n\n\n# Importing The Data\n\nWaffle plots are best used to visualise count data, often as an alternative to something like a pie chart or bar chart. The data we will be using is a count of medals won at the Paris 2024 Olympic Games by country. This dataset is from Kaggle (which is a generally useful place to find datasets to practice data visualisation or machine learning) and can be found [here](https://www.kaggle.com/datasets/berkayalan/paris-2024-olympics-medals).\n\n# Processing The Data\n\nOut of the box the data looks as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import the data from a csv file\nolympic_data <- read.csv('olympics2024.csv')\n\nprint(head(olympic_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Rank       Country Country.Code Gold Silver Bronze Total\n1    1 United States           US   40     44     42   126\n2    2         China          CHN   40     27     24    91\n3    3         Japan          JPN   20     12     13    45\n4    4     Australia          AUS   18     19     16    53\n5    5        France          FRA   16     26     22    64\n6    6   Netherlands          NED   15      7     12    34\n```\n\n\n:::\n:::\n\n\n\nThis is great as there is not particularly any cleaning that we will need to do. It is worth getting rid of the `Country.Code` and `Total` columns however as we will not be needing these. We can do this with `select()`. We can see that `Gold`, `Silver` and `Bronze` and `Rank` are already integers but `Country` contains character variables. It won't make a difference here but it's generally better to convert this column to factors instead, as this is how we will be using it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove unwanted columns\nolympic_data <- olympic_data |>\n  select(-c(Total, Country.Code))\n\n# Convert country to factor\nolympic_data$Country <- as.factor(olympic_data$Country)\n\n# See the result\nprint(head(olympic_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Rank       Country Gold Silver Bronze\n1    1 United States   40     44     42\n2    2         China   40     27     24\n3    3         Japan   20     12     13\n4    4     Australia   18     19     16\n5    5        France   16     26     22\n6    6   Netherlands   15      7     12\n```\n\n\n:::\n:::\n\n\n\nThis is great however to plot a waffle plot we will actually need our data to be in a slightly different form. We do this with [pivot_longer().](https://tidyr.tidyverse.org/reference/pivot_longer.html)\n\nWhen using `pivot_longer()` Remember to specify the columns in the order you would like them to appear in the plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlong_data <- olympic_data |>\n  pivot_longer(\n    cols = c(Gold, Silver, Bronze),\n    names_to = \"Medal\",\n    values_to = \"Count\"\n  )\n```\n:::\n\n\n\nHere is our new dataframe, each country now has three rows, one for each of the number of gold, silver and bronze medals won.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(head(long_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 4\n   Rank Country       Medal  Count\n  <int> <fct>         <chr>  <int>\n1     1 United States Gold      40\n2     1 United States Silver    44\n3     1 United States Bronze    42\n4     2 China         Gold      40\n5     2 China         Silver    27\n6     2 China         Bronze    24\n```\n\n\n:::\n:::\n\n\n\n# Creating Waffle Plots\n\nAs mentioned earlier, the way we will be creating a waffle plot today is with the `waffle()` function. This function could not be more simple, we input a dataframe with a column of descriptions and a column of values and out comes a waffle plot!\n\nTo start let's just consider Great Britain (using `filter`).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use filter to get just the data about GB\nGB_data <- long_data |> filter(Country == 'Great Britain')\n\n# Create the waffle plot,\nwaffle(data.frame(GB_data$Medal, GB_data$Count))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nWe could do with tidying this plot up a little and it would be nice to have the colours match \"gold\", \"silver\" and \"bronze\".\n\nIn general when making waffle plots it might also be nice to have as few \"left over\" squares as possible, meaning ideally we would want the total number of squares to be a multiple of the number of rows. We can do this by summing our `Count` column and looking for any factors which we can achieve concisely with the `primeFactors()` function from the `numbers` library.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(numbers)\n\ntotal <- sum(GB_data$Count)\n\nprint(primeFactors(total))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  5 13\n```\n\n\n:::\n:::\n\n\n\nWe can see that 5 is a prime factor of our total, meaning if we choose 5 rows we won't be left with any \"hanging squares\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a title, set the number of rows and change the legend position\nwaffle(data.frame(GB_data$Medal, GB_data$Count), rows = 5,\n       title = \"Team GB Medals: Paris 2024\",\n       legend_pos = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nWe can change the colours with the `colors` argument.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwaffle(data.frame(GB_data$Medal, GB_data$Count), rows = 5,\n       title = \"Team GB Medals: Paris 2024\",\n       legend_pos = \"bottom\",\n       colors = c('#d4af37', '#c0c0c0', '#cd7f32'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nThere we have it, our first waffle plot! Each square represents a medal won.\n\nWe can also turn this plot into a pictogram, to do this you will need fontawesome installed on your computer. By default the medal glyph is a bit too large for this plot so we set its size manually to 8 with the `glyph_size` argument.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(extrafont)\nlibrary(fontawesome)\nloadfonts(device = 'all')\nwaffle(data.frame(GB_data$Medal, GB_data$Count), rows = 5,\n       title = \"Team GB Medals: Paris 2024\",\n       legend_pos = \"bottom\",\n       colors = c('#d4af37', '#c0c0c0', '#cd7f32'),\n       use_glyph = 'medal', glyph_size = 8)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nThere's nothing stopping us creating plots for different countries too. In fact we could show several on one plot using the `iron` function from the `waffle` package or using a function from another package such as `plot_grid()` from the `cowplot` package.\n\nTo simplify our code when doing this I'm also going to create a function to make us a waffle plot.\n\nThis function has one mandatory input, `country`, the country you wish to make the plot for. It has optional argument of `data` (I made this customisable in case we wished to plot for a different Olympic Games for example), `legend_pos` which we can use to make sure there's only one legend for the plot and `size` in case we want to adjust this.\n\nTo create a title that gives each country and its rank we use `paste()` which is a way to concatenate strings in R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_waffle <- function(country, data = long_data, legend_pos = 'none', size = 0.25)\n  {\n  data <- data |> filter(data$Country == country)\n  plot <- waffle(data.frame(data$Medal, data$Count), \n                 size = size, legend_pos = legend_pos,\n                 keep = FALSE, colors = c('#d4af37', '#c0c0c0', '#cd7f32'),\n                 title =  paste(country, ':', data$Rank[1]))\n  return (plot)\n}\n```\n:::\n\n\n\nLet's test that this works for Australia. We do need to adjust the `size` parameter to make this look great.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_waffle(\"Australia\", size = 1, legend_pos='bottom')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nPerfect! Time to combine our plots. We will plot the top five countries with `cowplot` first.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cowplot)\n\n# Filter long_data to find the top 5 countries,\n# use unique to remove duplicates as each country has 3 rows.\ntop_countries <- filter(long_data,\n                        Rank %in% c(1, 2, 3, 4, 5))$Country|> unique()\n\n# Titles with cowplot are a bit awkward,\n# to get around this we use ggdraw and create a plot that is just a title.\n\ntitle <- ggdraw() + \n  draw_label(\n    \"Paris 2024 Olympic Games: Medals for Top 5 Countries\",\n    fontface = 'bold',\n    hjust = 0\n  )\n\n# To get the layout we want we need to add two blank plots\n# to the first row using geom_blank()\n\nplot_grid(title, geom_blank(), geom_blank(),\n          country_waffle(top_countries[1]),\n          country_waffle(top_countries[2]),\n          country_waffle(top_countries[3]),\n          country_waffle(top_countries[4]),\n          country_waffle(top_countries[5],\n                         legend_pos = 'right'), ncol=3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=150%}\n:::\n:::\n\n\n\nAlternatively we could do this with the built in `iron()` function in `waffle`. I wanted to show both ways as something like `plot_grid()` is more customisable but it can be awkward to work with.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niron(country_waffle(top_countries[1]),\n     country_waffle(top_countries[2]),\n     country_waffle(top_countries[3],\n                    legend_pos = 'bottom'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nThe `iron()` function is better for a smaller number of plots as it can squish things quite a bit.\n\nThis isn't the only way of creating waffle plots however, in a future post I will be looking at creating waffle plots with `geom_waffle` instead, `waffle()` is great for simple one off plots but `geom_waffle` is definitely the way to go when trying to do something a bit more complicated, such as [this example](https://r-graph-gallery.com/web-waffle-chart-for-distribution.html) from [r-graph-gallery.com](https://r-graph-gallery.com).\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}