{
  "hash": "eb328caef2b0b6ccb4441663eede09d2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How Many Penguins? A First Look at Visualising Data With R and ggplot2\"\ndescription: \"An introduction to ggplot2 using the Palmer Archipelago dataset, focusing on data cleansing and bar plots.\"\ndate: \"11/09/2024\"\ncategories:\n  - ggplot2\n  - R\n  - data visualisation\n  - penguin tutorial\n---\n\n\n\n\n\nR and its ggplot2 package are wonderful tools for visualising data. In this post, we will explore some of the basics of plotting with ggplot2 by creating bar charts using the famous Palmer Archipelago dataset.\n\n![Palmer penguins. Artwork by \\@allison_horst.](images/penguins.png){fig-align=\"center\"}\n\nThe dataset being used can be downloaded directly (in csv format) from [Kaggle](https://www.kaggle.com/code/parulpandey/penguin-dataset-the-new-iris) or imported directly into R with the `palmerpenguins` package.\n\n# Importing the Data\n\nMove the dataset to the location of the R script you will be plotting in, or use a relative path. Remember that for R to find your file you may need to set your current working directory, you can do this in RStudio by clicking `Session <- Set Working Directory <- To Source File Location` in the banner, or by running the `setwd(\"/your_path_here\")` command.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import the penguins dataset using the read.csv() function, built into R\npenguins <- read.csv(\"penguins_size.csv\")\n\n# View the first few entries of the dataframe\nprint(penguins[1:5,])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  species    island culmen_length_mm culmen_depth_mm flipper_length_mm\n1  Adelie Torgersen             39.1            18.7               181\n2  Adelie Torgersen             39.5            17.4               186\n3  Adelie Torgersen             40.3            18.0               195\n4  Adelie Torgersen               NA              NA                NA\n5  Adelie Torgersen             36.7            19.3               193\n  body_mass_g    sex\n1        3750   MALE\n2        3800 FEMALE\n3        3250 FEMALE\n4          NA   <NA>\n5        3450 FEMALE\n```\n\n\n:::\n:::\n\n\n\n# Cleaning Up\n\nViewing the dataset by printing the first few rows has revealed our first issue, this data has several NA values. A great way to visualise the amount of data missing in a given dataframe in R is using the `vis_miss` function from the `naniar` library. You may need to install this by running `install.packages('naniar')`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages('naniar')\nlibrary(naniar)\nvis_miss(penguins)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/vismiss-1.png){width=672}\n:::\n:::\n\n\n\nReassuringly the dataset has very few missing values. The easiest way to deal with these will be to exclude them using `na.omit()` which simply removes each row in a dataframe that has any NA values in it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins <- na.omit(penguins)\n\nvis_miss(penguins)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/omit nas and convert to factors-1.png){width=672}\n:::\n:::\n\n\n\nAnother good idea when working with a new dataset is to make sure that any categorical variables are treated as factors in R. This can be done with `as.factor(col)` and makes sure that plots of categorical variables work correctly.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins$sex <- as.factor(penguins$sex)\npenguins$island <- as.factor(penguins$island)\npenguins$species <- as.factor(penguins$species)\n```\n:::\n\n\n\nWe can also change the names of any columns. Below I have changed the names of the variables will be plotting to be capitalised so that they will look a little nicer in legends.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(penguins)[names(penguins) == 'island'] <- 'Island'\nnames(penguins)[names(penguins) == 'species'] <- 'Species'\nnames(penguins)[names(penguins) == 'sex'] <- 'Sex'\n```\n:::\n\n\n\nThere is one more issue with the dataset in its current form. The sex for one observation is missing, instead containing just a full stop. A helpful side effect of converting our categorical variables to factors is that we can see this easily by printing the levels of each factor variable.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(levels(penguins$Sex))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \".\"      \"FEMALE\" \"MALE\"  \n```\n\n\n:::\n\n```{.r .cell-code}\nprint(levels(penguins$Island))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Biscoe\"    \"Dream\"     \"Torgersen\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(levels(penguins$Species))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Adelie\"    \"Chinstrap\" \"Gentoo\"   \n```\n\n\n:::\n:::\n\n\n\nTo handle this we can use the `filter()` function from the `dplyr` library. The `!` before `(Sex == \".\")` means that rather than returning the dataset with only rows where the sex of the penguin is \".\" the function will do the opposite and select all rows where the sex does not equal \".\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\npenguins <- filter(penguins, !(Sex == \".\"))\n```\n:::\n\n\n\nWe are now ready to start plotting. For this first look at ggplot2 we will focus on bar plots.\n\n# Creating Plots\n\nTo create any plot with ggplot2 we first need to create the plot area with the `ggplot()` function. For all plots we will need to specify the data being used and any aesthetics we wish to pass through to the graphs we will be plotting. For this first tutorial we will focus exclusively on the number of penguins for specific categories in the dataset rather than any other dependent variable.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2) # Load the ggplot2 library at the start of the script\n\nggplot(data = penguins, aes(x=Species)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/bar_plot0-1.png){width=672}\n:::\n:::\n\n\n\nIntuitively, we add new elements to a plot with +. For this tutorial we use `geom_bar()` for a bar plot but other plots available include `geom_point()` for a scatter plot, `geom_col()` for a column plot or `geom_line()` for a line plot. We could even add multiple plots to the same axes.\n\nIn aesthetics (`aes`), `x = Species` means that the x-axis of our bar plot i.e. the category is the species of penguin. In the below plot `x = Island` is used to instead have the island the penguin was found on in the x-axis. For this plot `fill = Species` indicates that we want our bars to be coloured by the species of the penguin.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We can also use a pipe from the dplyr library (think of it as 'then')\npenguins %>%\n  ggplot(aes(x=Island, fill=Species)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nWe can enhance our plots by adding some labels using `labs()` to add a title, x-axis and y-axis. To change the title of a legend we can use the argument `fill = title` for bar plots.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x=Species, fill=Species)) +\n  geom_bar()+\n  labs(title=\"Penguins in the Palmer Archipelago\",\n       x = \"Species\",\n       y=\"Penguin Count\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/bar_plot-1.png){width=672}\n:::\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x=Island, fill=Species)) +\n  geom_bar(position = \"dodge2\")+\n  labs(title=\"Penguins in the Palmer Archipelago\",\n       x = \"Island\",\n       y=\"Penguin Count\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/bar_plot-2.png){width=672}\n:::\n:::\n\n\n\nThemes allow us to customise our plots further. There are many built into ggplot2 however my favourite, easy to implement, themes are those in the `ggthemes` package. The below graphs use the themes `theme_hc`, `theme_economist` and `theme_calc()` but there are far more available. Each theme also comes with a colour palette that can be used. A custom colour palette could also have been used with `scale_color_manual(c(color1, color2, color3))` .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggthemes) # Load the ggthemes library\n\npenguins %>%\n  ggplot(aes(x=Species, fill=Species)) +\n  geom_bar()+\n  labs(title=\"Penguins in the Palmer Archipelago\",\n       x=\"Species\",\n       y=\"Penguin Count\") +\n  geom_rangeframe() + # Highlights the range of the variables\n  theme_hc() + # Use the hc theme\n  scale_fill_hc()+ # Use the hc palette\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/bar_plot2-1.png){width=672}\n:::\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x=Island, fill=Species)) +\n  geom_bar(position = \"dodge2\")+ # position = dodge2 puts the bars side by side\n  labs(title=\"Penguins in the Palmer Archipelago\",\n       x = \"Island\",\n       y=\"Penguin Count\",\n       fill=\"Species\") +\n  geom_rangeframe() +\n  scale_fill_economist()+ # Use the economist palette\n  theme_economist() # Use the economist theme\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/bar_plot2-2.png){width=672}\n:::\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x=Sex, fill=Species)) +\n  geom_bar(position = \"dodge2\")+\n  labs(title=\"Penguins in the Palmer Archipelago\",\n       x = \"Sex\",\n       y=\"Penguin Count\",\n       fill=\"Species\") +\n  geom_rangeframe() +\n  scale_fill_few()+ \n  theme_calc() # We can mix and match themes and palettes\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/bar_plot2-3.png){width=672}\n:::\n:::\n\n\n\n# Combining Plots\n\nWe can use a facet grid to combine all of the information from our plots so far into a single, easy to read plot. To do this we will need to reshape the `penguins` dataframe using the `melt` function and the the `MASS`, `reshape` and `reshape2` packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS) \nlibrary(reshape2) \nlibrary(reshape) \n\n\npenguin_2 <- melt(penguins, id = c('culmen_length_mm', 'culmen_depth_mm',\n                                   'flipper_length_mm', 'body_mass_g',\n                                   'Species','Sex'))\n\nprint(head(penguin_2)) # See the first few entries of our reshaped dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  culmen_length_mm culmen_depth_mm flipper_length_mm body_mass_g Species    Sex\n1             39.1            18.7               181        3750  Adelie   MALE\n2             39.5            17.4               186        3800  Adelie FEMALE\n3             40.3            18.0               195        3250  Adelie FEMALE\n4             36.7            19.3               193        3450  Adelie FEMALE\n5             39.3            20.6               190        3650  Adelie   MALE\n6             38.9            17.8               181        3625  Adelie FEMALE\n  variable     value\n1   Island Torgersen\n2   Island Torgersen\n3   Island Torgersen\n4   Island Torgersen\n5   Island Torgersen\n6   Island Torgersen\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create a vector so that we can later show the sex of a penguin as \"Male\"\n# or \"Female\" rather than the all caps version\n\nsex.labs <- c(\"Male\", \"Female\")\nnames(sex.labs) <- c(\"MALE\", \"FEMALE\")\n\n\nggplot(penguin_2, aes(x=value, fill = Species))+\n  geom_bar(position = \"dodge2\")+\n  facet_grid(Sex~variable, # facet_grid showing sex and each variable (Island) \n             scales=\"free\",\n             space=\"free_x\", \n             labeller = labeller(Sex=sex.labs))+ # Renames the sexes\n  labs(x=\"\",\n       y=\"Penguin Count\",\n       title=\"Penguins in the Palmer Archipelago\")+\n  theme_hc()+\n  scale_fill_manual(values=c(\"#FF8100\", \"#C25ECA\", \"#067476\")) # Set custom colours\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n# Conclusion\n\nThis final plot shows us the distribution of penguins across each island, for each species and for both sexes.\n\nIn the next post we will begin looking at the other variables in the dataset such as body mass and flipper length and look at if these vary based on sex, island or species.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}